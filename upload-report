#!/usr/bin/env python3

import argparse
import requests
from paramiko import SSHClient
from scp import SCPClient


def parse_args():
    """
    Handle CLI arguments.
    """
    parser = argparse.ArgumentParser()
    parser.add_argument(
            "--file",
            default = "",
            action="store",
            help="Path to the report file to upload to the proxy",
    )
    parser.add_argument(
            "--status",
            action="store",
            required=True,
            help="Status of the test to send as a Github commit status",
    )
    parser.add_argument(
            "--sha",
            required=True,
            action="store",
            help="SHA commit hash to report the commit status for"
    )
    args = parser.parse_args()
    return args


def upload_report(report):
    """
    Uploads the report to the CI runner proxy
    """
    ssh_ob = SSHClient()
    ssh_ob.load_system_host_keys()
    ssh_ob.connect(hostname="ws-ci-runner.securedrop.org", username="wscirunner", key_filename="/home/user/.ssh/id_ed25519_sdci_upload")
    scp = SCPClient(ssh_ob.get_transport())
    scp.put(f"/home/user/QubesIncoming/dom0/{report}", remote_path="/var/www/html/reports")
    scp.close()


def report_status(status, sha, report):
    """
    Reports a Github commit status
    """
    if status == "error":
        description = "There was a problem during the teardown process"
    elif status == "failure":
        description = "There was a problem during the build or test process"
    elif status == "success":
        description = "The build succeeded"
    elif status == "pending":
        description = "The build is queued"
    elif status == "running":
        description = "The build is running"
    elif status == "canceled":
        description = "The build was canceled by an administrator"
    else:
        raise SystemError(f"Unrecognized status: {status}")

    github_token = "ghp_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
    headers = {
            "Authorization": f"Bearer {github_token}",
            "Content-Type": "application/json",
    }
    data = {}
    data["description"] = description
    if status in ["error", "failure", "success"]:
        data["target_url"] = f"https://ws-ci-runner.securedrop.org/{report}"

    # Github expects state 'error', 'failure', 'success' or 'pending'.
    # Override our non-standard statuses to the closest match to make the
    # API call work.
    if status == "canceled":
        status = "error"
    if status == "running":
        status = "pending"
    data["state"] = status

    r = requests.post(f"https://api.github.com/repos/freedomofpress/securedrop-workstation/statuses/{sha}", json=data, headers=headers)


if __name__ == "__main__":
    # Parse args
    args = parse_args()
    if args.status in ["error", "failure", "success"]:
        # Upload the report to the CI runner proxy
        upload_report(args.file)
    # Report Github status check
    report_status(args.status, args.sha, args.file)
