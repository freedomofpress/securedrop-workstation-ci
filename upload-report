#!/usr/bin/env python3

import argparse
import requests
from ansi2html import Ansi2HTMLConverter
from paramiko import SSHClient
from scp import SCPClient


def parse_args():
    """
    Handle CLI arguments.
    """
    parser = argparse.ArgumentParser()
    parser.add_argument(
            "--file",
            default="",
            action="store",
            help="Path to the report file to upload to the proxy",
    )
    parser.add_argument(
            "--status",
            action="store",
            required=True,
            help="Status of the test to send as a Github commit status",
    )
    parser.add_argument(
            "--sha",
            required=True,
            action="store",
            help="SHA commit hash to report the commit status for"
    )
    args = parser.parse_args()
    return args


def upload_report(report):
    """
    Uploads the report to the CI runner proxy
    """
    # First, make a .html copy of our .txt report with the
    # ANSI colors converted to span styles
    conv = Ansi2HTMLConverter()
    report_file_html = report.replace(".txt", ".html")
    report_path = "/home/user/QubesIncoming/dom0"
    with open(f"{report_path}/{report}", "r") as report_txt:
        with open(f"{report_path}/{report_file_html}", "w") as report_html:
            report_html.write(conv.convert("".join(report_txt.readlines())))

    # Upload the HTML report to the proxy
    ssh_ob = SSHClient()
    ssh_ob.load_system_host_keys()
    ssh_ob.connect(hostname="ws-ci-runner.securedrop.org", username="wscirunner")
    scp = SCPClient(ssh_ob.get_transport())
    scp.put(f"{report_path}/{report_file_html}", remote_path="/var/www/html/reports")
    scp.close()


def report_status(status, sha, report=""):
    """
    Reports a Github commit status
    """
    if status == "error":
        description = "There was a problem during the teardown process"
    elif status == "failure":
        description = "There was a problem during the build or test process"
    elif status == "success":
        description = "The build succeeded"
    elif status == "pending":
        description = "The build is queued"
    elif status == "running":
        # For Github, the status still has to be 'pending', but we differentiate
        # the description based on whether it is queued or running.
        status = "pending"
        description = "The build is running"
    else:
        raise SystemError(f"Unrecognized status: {status}")

    # Currently uses mig5's own PAT, we would want to use sdcibot in prod I imagine
    github_token = "ghp_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
    headers = {
            "Authorization": f"Bearer {github_token}",
            "Content-Type": "application/json",
    }
    data = {
        "state": status,
        "description": description
    }
    # We are pointing to our HTML copy of the report
    if report != "":
        report = report.replace(".txt", ".html")
        data["target_url"] = f"https://ws-ci-runner.securedrop.org/{report}"

    r = requests.post(f"https://api.github.com/repos/mig5/securedrop-workstation/statuses/{sha}", json=data, headers=headers)


if __name__ == "__main__":
    # Parse args
    args = parse_args()
    # Upload the report to the CI runner proxy
    if args.file != "":
        upload_report(args.file)
    # Report Github status check
    report_status(args.status, args.sha, args.file)
